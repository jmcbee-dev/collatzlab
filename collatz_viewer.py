# -*- coding: utf-8 -*-
import random

import matplotlib.pyplot as plt
# Form implementation generated from reading ui file 'collatz_viewer.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSlot
import collatzlib
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT
from matplotlib.figure import Figure
import numpy as np
import matplotlib

matplotlib.use('QT5Agg')

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1000, 518)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(10, 10, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")

        self.binary_string_box = QtWidgets.QTextEdit(Dialog)
        self.binary_string_box.setGeometry(QtCore.QRect(160, 70, 301, 100))
        self.binary_string_box.setObjectName("binary_string_box")
        self.binary_string_box.setReadOnly(True)

        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(270, 50, 141, 20))
        self.label_2.setObjectName("label_2")

        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(177, 190, 141, 20))
        self.label_3.setObjectName("label_3")

        self.diophantine_eq_box = QtWidgets.QTextEdit(Dialog)
        self.diophantine_eq_box.setGeometry(QtCore.QRect(10, 210, 400, 210))
        self.diophantine_eq_box.setObjectName("diophantine_eq_box")
        self.diophantine_eq_box.setReadOnly(True)

        self.input_number = QtWidgets.QLineEdit(Dialog)
        self.input_number.setGeometry(QtCore.QRect(10, 70, 141, 32))
        self.input_number.setObjectName("input_number")

        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(30, 50, 58, 18))
        self.label_4.setObjectName("label_4")

        self.run_input = QtWidgets.QPushButton(Dialog)
        self.run_input.setGeometry(QtCore.QRect(30, 130, 88, 34))
        self.run_input.setObjectName("run_input")

        self.figure = Figure()
        self.canvas = FigureCanvasQTAgg(self.figure)
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.canvas)

        self.retranslateUi(Dialog)
        self.run_input.clicked.connect(self.runCollatz) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Collatz Tool"))
        self.label_2.setText(_translate("Dialog", "Reducing Parity String"))
        self.label_3.setText(_translate("Dialog", "Diophantine Equation"))
        self.label_4.setText(_translate("Dialog", "Input"))
        self.run_input.setText(_translate("Dialog", "Run Collatz"))

    def runCollatz(self):
        try:
            input = int(self.input_number.text())
            two, three, _, b, m = CollatzLib.find_collatz_stop_binary(input)
            self.binary_string_box.document().setPlainText(b)
            c = CollatzLib.find_c(b)
            self.diophantine_eq_box.document().setPlainText(f'3 ^ {three} - 2 ^ {two} = {-c}')
            path = CollatzLib.find_reducing_path(input)

        except ValueError:
            self.binary_string_box.document().setPlainText('Invalid input; please input an integer')

    def plot(self):
        data = [random.Random() for i in range(10)]
        ax = self.figure.add_subplot(111)
        ax.clear()
        ax.plot(data, '*-')
        self.canvas.draw()

class Canvas(FigureCanvasQTAgg):
    def __init__(self, parent):
        fig, self.ax = plt.subplots(figsize=(5,4), dpi=200)
        super().__init__(fig)
        self.setParent(parent)

        t = np.arange(0.0, 2.0, 0.01)
        s = 1 + np.sin(2 * np.pi * t)

        self.ax.plot(t, s)
        self.ax.grid()


class CanvasWidget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        QtWidgets.QWidget.__init__(self, parent)
        self.canvas = Canvas()
        self.vbl = QtWidgets.QVBoxLayout()
        self.vbl.addWidget(self.canvas)
        self.setLayout(self.vbl)

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())